
O(2n)==O(n)


int main()
{
    int a=3;
    cout<<a;
    return 0;
}

for(int i=0---->n)
{
    for(int j=0;j---->m)
    {
        ......
    }
} 
TC : O(n*m)

for(int i=0;i*i<n;i++)
{
    .....
}
TC : O(sqrt(n))



void printNumbers(int i, int n) {
    if (i > n) return; // base case
    cout << i << " ";
    printNumbers(i + 1, n);
    }

int main() {
    int n = 10;
    printNumbers(1, n);
    return 0;
}
TC : O(n)
SC : O(n)


int sumOfNumbers(int n) {
    return (n * (n + 1)) / 2;
}

int main() {
    int n = 10;
    cout << "Sum: " << sumOfNumbers(n) << endl;
    return 0;
}
TC : O(1) 
SC : O(1)

int findMax(int arr[], int n) {
    int maxVal = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > maxVal) {
            maxVal = arr[i];
        }
    }
    return maxVal;
}

int main() {
    int arr[] = {3, 1, 8, 2, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "Maximum: " << findMax(arr, n) << endl;
    return 0;
}
TC: O(n)
SC: O(n)



int fibonacci(int n) {
    if (n <= 1) return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}
int main() {
    int n = 5;
    cout << "Fibonacci: " << fibonacci(n) << endl;
    return 0;
}
TC: O()
SC: O()


